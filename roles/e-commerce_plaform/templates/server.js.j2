const http = require("http");
const express = require('express');
const session = require('express-session');
const { ExpressOIDC } = require('@okta/oidc-middleware');
const path = require('path');
const checkoutRoutes = require('./routes/checkout');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const stripe = require('stripe')('sk_test_51PsFXKP8XbnKVBWJY6amJ0zJ87yP5Jr4VzA2Lqs3h8mpDAEyRUklfe7GUxg5edZBspRL0w1qaTlhEgSovDM3Z4dG00GN82l0QO');

// Initialize express app
const app = express();
app.use(express.json());

// Session setup
app.use(session({
    secret: 'your-session-secretSa',
    resave: true,
    saveUninitialized: false,
}));
app.get('/test-session', (req, res) => {
    if (req.session) {
        res.send('Session is working');
    } else {
        res.send('Session is not working');
    }
});

// Okta OIDC setup
const oidc = new ExpressOIDC({
    issuer: 'https://dev-94271413.okta.com/oauth2/default',
    client_id: '0oail44lnqcBE9uMB5d7',
    client_secret: '2Yr3A7FeadkfZbwjT1cEGvBLzqcpAhE88fNb6CI3F23hrtuvDNLEa0xxhR1p_D-p',
    redirect_uri: 'http://34.31.184.18:3000/authorization-code/callback',
    scope: 'openid profile email',
    appBaseUrl: 'http://34.31.184.18:3000',
    token_url: 'https://dev-94271413.okta.com/oauth2/default/v1/token'
});
app.use(oidc.router);

app.get('/authorization-code/callback', oidc.ensureAuthenticated(), async (req, res) => {
    try {
        // Extract user information from OKTA session
        const oktaId = req.userContext.userinfo.sub;
        const email = req.userContext.userinfo.email;
        const username = req.userContext.userinfo.preferred_username || email.split('@')[0];

        // Check if the user already exists in the database
        let user = await User.findOne({ oktaId });

        if (!user) {
            // If the user does not exist, create a new record
            user = new User({ oktaId, email, username });
            await user.save();
            console.log('New user saved:', user);
        } else {
            console.log('User already exists:', user);
        }

        // Redirect to the home page or wherever appropriate
        res.redirect('/');
    } catch (err) {
        console.error('Error during user data collection:', err);
        res.status(500).send('Internal Server Error');
    }
});

// Protect the index page
app.get('/', oidc.ensureAuthenticated(), (req, res) => {
    res.sendFile(path.join('/var/www/html/login/static', 'index.html'));
});
// Serve static files from the 'static' directory
app.use(express.static(path.join(__dirname, 'static')));

// API routes
app.use('/auth', authRoutes);
app.use('/checkout', checkoutRoutes);

oidc.on('ready', () => {
    app.listen(3000, () => console.log('App started on port 3000'));
});

oidc.on('error', err => {
    console.log('Unable to configure ExpressOIDC', err);
});
